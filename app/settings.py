"""
Django settings for app project (production-ready).

Generated by 'django-admin startproject' using Django 5.2.5.
Docs:
- Settings: https://docs.djangoproject.com/en/5.2/ref/settings/
- Deployment checklist: https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
"""

from pathlib import Path
import os
import dj_database_url

# ------------------------------------------------------------
# Paths
# ------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------
# Core security & env flags
# ------------------------------------------------------------
# Use a fixed dev key locally; override in production via DJANGO_SECRET_KEY
_DEV_SECRET = "django-insecure-mid46st^ur-fn%j#bpyp&4+gafpo5cugl*q-&)kju0+kx6kk3#"
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", _DEV_SECRET)

# DEBUG from env; default False in production, True locally
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"   # default True for local
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# Hosts / CSRF
if DEBUG:
    ALLOWED_HOSTS = ["*"]
    CSRF_TRUSTED_ORIGINS = [
        o for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o
    ]
else:
    # Comma-separated lists, e.g.:
    # DJANGO_ALLOWED_HOSTS=your-service.onrender.com,yourdomain.com
    # DJANGO_CSRF_TRUSTED_ORIGINS=https://your-service.onrender.com,https://yourdomain.com
    ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h]
    CSRF_TRUSTED_ORIGINS = [o for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o]

# Forwarded proto header (Render / most PaaS)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Optional stricter cookies/redirects in prod
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# ------------------------------------------------------------
# Applications
# ------------------------------------------------------------
INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party
    "rest_framework",

    # Local apps
    "practice",
]

# ------------------------------------------------------------
# Middleware (WhiteNoise right after SecurityMiddleware)
# ------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise right after SecurityMiddleware:
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app.urls"

# ------------------------------------------------------------
# Templates
# ------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Global templates dir (keep your app templates under practice/templates too)
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"

# ------------------------------------------------------------
# Database: prefer DATABASE_URL in production, fallback to SQLite in dev
# ------------------------------------------------------------
if os.getenv("DATABASE_URL"):
    DATABASES = {
        "default": dj_database_url.parse(
            os.environ["DATABASE_URL"],
            conn_max_age=600,  # persistent connections
        )
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ------------------------------------------------------------
# Password validation
# ------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------
# I18N / TZ
# ------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"  # change to "America/Los_Angeles" if preferred
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------
# Static files (WhiteNoise)
# ------------------------------------------------------------
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"   # where collectstatic puts files
STATICFILES_DIRS = [BASE_DIR / "static"] if (BASE_DIR / "static").exists() else []

# Django 5+ storages API (compressed, cache-busted files)
STORAGES = {
    "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
}

# ------------------------------------------------------------
# Auth redirects
# ------------------------------------------------------------
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/accounts/login/"

# ------------------------------------------------------------
# Default PK type
# ------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


